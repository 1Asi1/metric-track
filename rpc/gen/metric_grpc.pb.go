// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: metric.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricGrpc_Updates_FullMethodName = "/metric_grpc.metricGrpc/Updates"
)

// MetricGrpcClient is the client API for MetricGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricGrpcClient interface {
	Updates(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*UpdatesResponse, error)
}

type metricGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricGrpcClient(cc grpc.ClientConnInterface) MetricGrpcClient {
	return &metricGrpcClient{cc}
}

func (c *metricGrpcClient) Updates(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*UpdatesResponse, error) {
	out := new(UpdatesResponse)
	err := c.cc.Invoke(ctx, MetricGrpc_Updates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricGrpcServer is the server API for MetricGrpc service.
// All implementations must embed UnimplementedMetricGrpcServer
// for forward compatibility
type MetricGrpcServer interface {
	Updates(context.Context, *UpdatesRequest) (*UpdatesResponse, error)
	mustEmbedUnimplementedMetricGrpcServer()
}

// UnimplementedMetricGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedMetricGrpcServer struct {
}

func (UnimplementedMetricGrpcServer) Updates(context.Context, *UpdatesRequest) (*UpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updates not implemented")
}
func (UnimplementedMetricGrpcServer) mustEmbedUnimplementedMetricGrpcServer() {}

// UnsafeMetricGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricGrpcServer will
// result in compilation errors.
type UnsafeMetricGrpcServer interface {
	mustEmbedUnimplementedMetricGrpcServer()
}

func RegisterMetricGrpcServer(s grpc.ServiceRegistrar, srv MetricGrpcServer) {
	s.RegisterService(&MetricGrpc_ServiceDesc, srv)
}

func _MetricGrpc_Updates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricGrpcServer).Updates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricGrpc_Updates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricGrpcServer).Updates(ctx, req.(*UpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricGrpc_ServiceDesc is the grpc.ServiceDesc for MetricGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metric_grpc.metricGrpc",
	HandlerType: (*MetricGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Updates",
			Handler:    _MetricGrpc_Updates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metric.proto",
}
